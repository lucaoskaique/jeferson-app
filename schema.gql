"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentPageMenuInput {
  id: ID
  socialLinks: [ComponentPageSocialLinksInput]
}

type ComponentPageMenu {
  id: ID!
  socialLinks(filters: ComponentPageSocialLinksFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentPageSocialLinks!]!
}

input ComponentPageSectionAboutInput {
  id: ID
  title: String
  description: String
  media: ID
}

type ComponentPageSectionAbout {
  id: ID!
  title: String!
  description: String!
  media: UploadFileEntityResponse
}

enum ENUM_COMPONENTPAGESOCIALLINKS_TITLE {
  Facebook
  LinkedIn
  Twitter
  Instagram
}

input ComponentPageSocialLinksFiltersInput {
  title: StringFilterInput
  url: StringFilterInput
  and: [ComponentPageSocialLinksFiltersInput]
  or: [ComponentPageSocialLinksFiltersInput]
  not: ComponentPageSocialLinksFiltersInput
}

input ComponentPageSocialLinksInput {
  id: ID
  title: ENUM_COMPONENTPAGESOCIALLINKS_TITLE
  url: String
}

type ComponentPageSocialLinks {
  id: ID!
  title: ENUM_COMPONENTPAGESOCIALLINKS_TITLE!
  url: String!
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  folder: ID
  folderPath: String
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  pathId: IntFilterInput
  parent: UploadFolderFiltersInput
  children: UploadFolderFiltersInput
  files: UploadFileFiltersInput
  path: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFolderFiltersInput]
  or: [UploadFolderFiltersInput]
  not: UploadFolderFiltersInput
}

input UploadFolderInput {
  name: String
  pathId: Int
  parent: ID
  children: [ID]
  files: [ID]
  path: String
}

type UploadFolder {
  name: String!
  pathId: Int!
  parent: UploadFolderEntityResponse
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  path: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFolderEntity {
  id: ID
  attributes: UploadFolder
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input AudioFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [AudioFiltersInput]
  or: [AudioFiltersInput]
  not: AudioFiltersInput
}

input AudioInput {
  title: String
  file: ID
  publishedAt: DateTime
}

type Audio {
  title: String!
  file: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type AudioEntity {
  id: ID
  attributes: Audio
}

type AudioEntityResponse {
  data: AudioEntity
}

type AudioEntityResponseCollection {
  data: [AudioEntity!]!
  meta: ResponseCollectionMeta!
}

input CategoryFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  slug: StringFilterInput
  posts: PostFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [CategoryFiltersInput]
  or: [CategoryFiltersInput]
  not: CategoryFiltersInput
}

input CategoryInput {
  name: String
  slug: String
  posts: [ID]
  publishedAt: DateTime
}

type Category {
  name: String!
  slug: String!
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): PostRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type CategoryEntity {
  id: ID
  attributes: Category
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

input GaleryFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [GaleryFiltersInput]
  or: [GaleryFiltersInput]
  not: GaleryFiltersInput
}

input GaleryInput {
  title: String
  media: [ID]
  publishedAt: DateTime
}

type Galery {
  title: String!
  media(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type GaleryEntity {
  id: ID
  attributes: Galery
}

type GaleryEntityResponse {
  data: GaleryEntity
}

type GaleryEntityResponseCollection {
  data: [GaleryEntity!]!
  meta: ResponseCollectionMeta!
}

input HomePageInput {
  menu: ComponentPageMenuInput
  sectionAbout: ComponentPageSectionAboutInput
  logo: ID
  publishedAt: DateTime
}

type HomePage {
  menu: ComponentPageMenu
  sectionAbout: ComponentPageSectionAbout!
  logo: UploadFileEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type HomePageEntity {
  id: ID
  attributes: HomePage
}

type HomePageEntityResponse {
  data: HomePageEntity
}

input PostFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  slug: StringFilterInput
  short_description: StringFilterInput
  content: StringFilterInput
  categories: CategoryFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PostFiltersInput]
  or: [PostFiltersInput]
  not: PostFiltersInput
}

input PostInput {
  title: String
  slug: String
  short_description: String
  content: String
  cover: ID
  categories: [ID]
  publishedAt: DateTime
}

type Post {
  title: String!
  slug: String!
  short_description: String!
  content: String!
  cover: UploadFileEntityResponse
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): CategoryRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PostEntity {
  id: ID
  attributes: Post
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

type PostRelationResponseCollection {
  data: [PostEntity!]!
}

input PublicationFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [PublicationFiltersInput]
  or: [PublicationFiltersInput]
  not: PublicationFiltersInput
}

input PublicationInput {
  title: String
  file: ID
  publishedAt: DateTime
}

type Publication {
  title: String!
  file: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type PublicationEntity {
  id: ID
  attributes: Publication
}

type PublicationEntityResponse {
  data: PublicationEntity
}

type PublicationEntityResponseCollection {
  data: [PublicationEntity!]!
  meta: ResponseCollectionMeta!
}

input TeamFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  role: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [TeamFiltersInput]
  or: [TeamFiltersInput]
  not: TeamFiltersInput
}

input TeamInput {
  photo: ID
  name: String
  role: String
  socialLinks: [ComponentPageSocialLinksInput]
  publishedAt: DateTime
}

type Team {
  photo: UploadFileEntityResponse!
  name: String!
  role: String!
  socialLinks(filters: ComponentPageSocialLinksFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentPageSocialLinks!]!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type TeamEntity {
  id: ID
  attributes: Team
}

type TeamEntityResponse {
  data: TeamEntity
}

type TeamEntityResponseCollection {
  data: [TeamEntity!]!
  meta: ResponseCollectionMeta!
}

input VideoFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  link: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  and: [VideoFiltersInput]
  or: [VideoFiltersInput]
  not: VideoFiltersInput
}

input VideoInput {
  title: String
  link: String
  image: ID
  publishedAt: DateTime
}

type Video {
  title: String!
  link: String!
  image: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type VideoEntity {
  id: ID
  attributes: Video
}

type VideoEntityResponse {
  data: VideoEntity
}

type VideoEntityResponseCollection {
  data: [VideoEntity!]!
  meta: ResponseCollectionMeta!
}

union GenericMorph = ComponentPageMenu | ComponentPageSectionAbout | ComponentPageSocialLinks | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | I18NLocale | Audio | Category | Galery | HomePage | Post | Publication | Team | Video

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  audio(id: ID): AudioEntityResponse
  audios(filters: AudioFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): AudioEntityResponseCollection
  category(id: ID): CategoryEntityResponse
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): CategoryEntityResponseCollection
  galery(id: ID): GaleryEntityResponse
  galeries(filters: GaleryFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): GaleryEntityResponseCollection
  homePage(publicationState: PublicationState = LIVE): HomePageEntityResponse
  post(id: ID): PostEntityResponse
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): PostEntityResponseCollection
  publication(id: ID): PublicationEntityResponse
  publications(filters: PublicationFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): PublicationEntityResponseCollection
  team(id: ID): TeamEntityResponse
  teams(filters: TeamFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): TeamEntityResponseCollection
  video(id: ID): VideoEntityResponse
  videos(filters: VideoFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): VideoEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  updateUploadFolder(id: ID!, data: UploadFolderInput!): UploadFolderEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  createAudio(data: AudioInput!): AudioEntityResponse
  updateAudio(id: ID!, data: AudioInput!): AudioEntityResponse
  deleteAudio(id: ID!): AudioEntityResponse
  createCategory(data: CategoryInput!): CategoryEntityResponse
  updateCategory(id: ID!, data: CategoryInput!): CategoryEntityResponse
  deleteCategory(id: ID!): CategoryEntityResponse
  createGalery(data: GaleryInput!): GaleryEntityResponse
  updateGalery(id: ID!, data: GaleryInput!): GaleryEntityResponse
  deleteGalery(id: ID!): GaleryEntityResponse
  updateHomePage(data: HomePageInput!): HomePageEntityResponse
  deleteHomePage: HomePageEntityResponse
  createPost(data: PostInput!): PostEntityResponse
  updatePost(id: ID!, data: PostInput!): PostEntityResponse
  deletePost(id: ID!): PostEntityResponse
  createPublication(data: PublicationInput!): PublicationEntityResponse
  updatePublication(id: ID!, data: PublicationInput!): PublicationEntityResponse
  deletePublication(id: ID!): PublicationEntityResponse
  createTeam(data: TeamInput!): TeamEntityResponse
  updateTeam(id: ID!, data: TeamInput!): TeamEntityResponse
  deleteTeam(id: ID!): TeamEntityResponse
  createVideo(data: VideoInput!): VideoEntityResponse
  updateVideo(id: ID!, data: VideoInput!): VideoEntityResponse
  deleteVideo(id: ID!): VideoEntityResponse
  upload(refId: ID, ref: String, field: String, info: FileInfoInput, file: Upload!): UploadFileEntityResponse!
  multipleUpload(refId: ID, ref: String, field: String, files: [Upload]!): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse
  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload
  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  """Reset user password. Confirm with a code (resetToken from forgotPassword)"""
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
